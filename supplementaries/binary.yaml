bioconductor:
  intersect: |
      pairs = findOverlapPairs(gr2, gr1, ignore.strand = FALSE)
      result = pintersect(pairs, ignore.strand = FALSE)
      result = result[mcols(result)$hit == TRUE]
  overlap: |
      result = findOverlapPairs(gr2, gr1, ignore.strand = FALSE)
      result = first(result)
  nearest: |
      result = distanceToNearest(gr2, gr1, ignore.strand = FALSE, select="arbitrary")
      subject = as.data.frame(gr1[subjectHits(result)])
      colnames(subject) = paste0(colnames(subject), "_b")
      query = as.data.frame(gr2[queryHits(result)])
      df = merge(subject, query, by=0)
      df = df[, -1]
      df = merge(df, mcols(result)$distance, by=0)
      df = df[, -1]
      result = makeGRangesFromDataFrame(df, keep.extra.columns=TRUE)
  set_intersect: |
      result = intersect(gr2, gr1)
  set_union: |
      result = union(gr1, gr2)
  join: |
      result <- findOverlapPairs(gr1, gr2, ignore.strand = FALSE)
      df1 = as.data.frame(first(result))
      df2 = as.data.frame(second(result))
      colnames(df2) = paste0(colnames(df2), "_b")
      df = merge(df1, df2, by=0)
      result = makeGRangesFromDataFrame(df, keep.extra.columns=TRUE)
  subtract: |
      hits <- findOverlaps(gr2, gr1, ignore.strand = FALSE)
      toSubtract <- reduce(extractList(gr1, as(hits, "List")),
          ignore.strand = FALSE)
      ans <- unlist(psetdiff(gr2, toSubtract, ignore.strand = FALSE))
      result <- subset(ans, width(ans) > 0L)

pybedtools:
  intersect:
    result = pb2.intersect(pb1, s=True)
  overlap:
    result = pb2.intersect(pb1, s=True, wa=True)
  nearest:
    result = pb2.sort().closest(pb1.sort(), s=True, t="first", d=True)
  nearest_nonoverlapping:
    result = pb2.sort().closest(pb1.sort(), s=True, t="first", io=True, d=True)
  set_intersect: |
    # the first flag is needed to keep the sixth columns
    sc = pb1.sort().merge(s=True, c=[4, 5, 6], o="first")

    if extension == "gtf":
        cols_to_keep = [4, 5, 7]
    elif extension == "bed":
        cols_to_keep = [4, 5, 6]

    sb = pb2.sort().merge(s=True, c=cols_to_keep, o="first")
    result = sc.intersect(sb, s=True)
  set_union: |
    # the first flag is needed to keep the sixth columns
    sc = pb1.sort().merge(s=True, c=[4, 5, 6], o="first")

    if extension == "gtf":
        cols_to_keep = [4, 5, 7]
    elif extension == "bed":
        cols_to_keep = [4, 5, 6]

    sb = pb2.sort().merge(s=True, c=cols_to_keep, o="first")
    catted = sc.cat(sb, s=True, c=[4, 5, 6], o="first").sort()
    result = catted.merge(s=True, c=[4, 5, 6], o="first")
  join:
    result = pb2.intersect(pb1, wao=True, s=True)
  subtract:
    result = pb2.subtract(pb1, s=True)
  jaccard:
    result = pb2.sort().jaccard(pb1.sort())


pyranges:
  intersect:
    result = gr2.intersect(gr, strandedness="same")
  overlap:
    result = gr2.overlap(gr, strandedness="same")
  nearest:
    result = gr.nearest(gr2, strandedness="same")
  nearest_nonoverlapping:
    result = gr.nearest(gr2, strandedness="same", overlap=False)
  set_intersect: |
    result = gr2.set_intersect(gr, strandedness="same")
  set_union: |
    result = gr2.set_union(gr, strandedness="same")
  join: |
    result = gr2.join(gr, strandedness="same")
  subtract: |
    result = gr2.subtract(gr, strandedness="same")
  jaccard: |
    result = gr2.jaccard(gr)
